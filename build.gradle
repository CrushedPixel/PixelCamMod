buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'license'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = "1.0"
group = "com.replaymod.pixelcam"
archivesBaseName = "pixelcam"

ext.projectName = 'PixelCam Mod'
ext.packaging = 'jar'
ext.author = 'CrushedPixel'
ext.authorUrl = 'http://crushedpixel.eu'
ext.inceptionYear = '2016'

minecraft {
    coreMod = "com.replaymod.pixelcam.coremod.LoadingPlugin"
    version = " 1.11.2-13.20.0.2228"
    runDir = "run"
    mappings = "snapshot_20170212"
}

dependencies {
    compile 'joda-time:joda-time:2.9.3'
}

def getGitCommitHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version + '-' + getGitCommitHash(), 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    dependsOn configurations.runtime
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "dummyThing"
    }

    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'com.replaymod.pixelcam.coremod.LoadingPlugin'
    }
}

license {
    ext.name = project.projectName
    ext.author = project.author
    ext.url = project.authorUrl
    ext.year = project.inceptionYear
    header new File(project.getProjectDir(), 'HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

defaultTasks 'build'